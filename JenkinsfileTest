pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mohzag/jenkins-flask-app'
        APP_NAME = 'jenkins-flask-app'
        IMAGE = "${APP_NAME}:${env.BUILD_NUMBER}"
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        KUBECONFIG = credentials('vas-kubeconfig')
        NAME_SPACE = 'flux-app'
        // AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        // AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
        
    }

    
    stages {
        stage('Setup') {
            steps {
                sh 'ls -la $KUBECONFIG'
                sh 'chmod 644 $KUBECONFIG'
                sh 'ls -la $KUBECONFIG'
                sh 'kubectl config use-context vasdev01-admin@vasdev01 --kubeconfig ${KUBECONFIG}'
                sh 'kubectl get ns'
                sh 'kubectl get nodes'
                sh 'chmod +x createNameSpace.sh'
                sh './createNameSpace.sh ${NAME_SPACE}'
                
            }
        }

        stage('Install Python PIP') {
            agent { docker { image 'python:3.12.0b3-alpine3.18'
    
                label 'docker-on-vas'
            }
            }
            steps {
                sh '''
                python3 -m venv .venv
                source .venv/bin/activate
                mkdir -p .pip-cache
                chmod +w .pip-cache
                pip install --upgrade pip --cache-dir .pip-cache
                pip install -r requirements.txt --cache-dir .pip-cache
                '''
            }
        }

        // stage('Test') {
        //     steps {
        //         sh "pytest"
        //     }
        // }

        stage('Login to docker hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'}
                echo 'Login successfully'
            }
        }

        stage('Build Docker Image')
        {
            steps
            {
                sh 'docker build -t ${IMAGE_TAG} .'
                echo "Docker image build successfully"
                sh 'docker image ls'
                
            }
        }

        stage('Push Docker Image')
        {
            steps
            {
                sh 'docker push ${IMAGE_TAG}'
                echo "Docker image push successfully"
            }
        }

        stage('Deploy to Staging')
        {
            steps {
                sh "sed -i 's/IMAGE_NAME/${APP_NAME}/g' k8s/deployment.yaml"
                sh "sed -i 's/VERSION/${env.BUILD_NUMBER}/g' k8s/deployment.yaml"
                sh 'kubectl apply -f k8s/deployment.yaml -n ${NAME_SPACE}'
                sh 'kubectl apply -f k8s/service.yaml -n ${NAME_SPACE}'
            }
        }

        // stage('Acceptance Test')
        // {
        //     steps {

        //         script {

        //             def service = sh(script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'", returnStdout: true).trim()
        //             echo "${service}"

        //             sh "k6 run -e SERVICE=${service} acceptance-test.js"
        //         }
        //     }
        // }

        // stage('Deploy to Prod')
        // {
        //     steps {
        //         sh 'kubectl config use-context user@prod.us-east-1.eksctl.io'
        //         sh 'kubectl config current-context'
        //         sh "kubectl set image deployment/flask-app flask-app=${IMAGE_TAG}"
        //     }
        // }       

        
    }
}